#! /usr/bin/bash
 
get_battery_info() {
    echo $(
        upower -i $(upower -e | grep BAT) \
        | grep $1 \
        | awk '{ print $2 }'
    )
}

# -----------------------------------------------------------------------------
# Main sub commands
# -----------------------------------------------------------------------------

shoot() {
    if [[ $2 == 'select' ]]; then
        local dimensions="$(slurp)"
        [[ -z $dimensions ]] && exit 0
        grim -g "$dimensions" $1
    else
        grim $1
    fi 

    action=$(
        notify-send "Screenshot" "Saved as $1" \
            -u normal -a 'grim' -t 5000 -w \
            -A "default=$1"
    )

    [[ $action == 'default' ]] && xdg-open $1
} 

appmenu() {
    pkill wofi && exit 0
    wofi -i -I -l 7 -w 25% -p 'App name...' --show=drun
}

powergov() {
    local gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
    local percent=$(get_battery_info 'percentage' | awk '{ print int($1) }')
    local charging=$(get_battery_info 'state')
    local class=''

    if [[ $charging == 'charging' ]] && (( percent < 100 )); then
        class='charging'
    elif (( percent <= $1 )) && (( percent > $2 )); then
        class='warning'
    elif (( percent <= $2 )); then
        class='critical'
    fi

    case $gov in
        'powersave')
            echo -e "ó°Œª\n${gov^}\n${class}"
        ;;
        'performance')
            echo -e "\n${gov^}"
        ;;
        *)
            echo -e "$gov\n\n${class}"
        ;;
    esac
}

lock() {
    if [[ -z $(pgrep swaylock) ]]; then
        playerctl pause 2> /dev/null
        swaylock
    fi
}

powerctl() {
    killall swaynag

    case $1 in
        'shutdown')
            swaynag -t powerctl -m 'Shutdown now' -B 'Yes' 'shutdown now'
        ;;
        'reboot')
            swaynag -t powerctl -m 'Reboot now' -B 'Yes' 'reboot'
        ;;
        'session-exit')
            swaynag -t powerctl -m 'Exit Wayland session' -B 'Yes' 'swaymsg exit'
        ;;
        'lock')
            lock
        ;;
    esac
}

add_workspace() {
    swaymsg "workspace $(swaymsg -rt get_workspaces | jq '(.|length)+1')"
}

sleep 0.1

subcmds="shoot appmenu powergov powerctl add_workspace"

for cmd in $subcmds; do
    [[ $1 == $cmd ]] && eval "$cmd ${@:2}" && exit 
done

echo "there is no subcommand $1"
exit 1
